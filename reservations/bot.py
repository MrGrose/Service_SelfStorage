import telegram
from telegram import (
    Bot,
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    Filters,
)
from environs import Env

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
CONSENT, MAIN_MENU = range(2)

def start(update: Update, context: CallbackContext):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SelfStorage ‚Äì —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.\n\n"
        "üì¶ –ö–æ–≥–¥–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω:\n"
        "- –ï—Å–ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –≤–µ—â–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ª—ã–∂–∏, —Å–Ω–æ—É–±–æ—Ä–¥—ã –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥.\n"
        "- –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–µ–∑–¥–∞ ‚Äì —á—Ç–æ–±—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –º–µ–±–µ–ª—å –∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏.\n"
        "- –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–Ω—ã–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Ö –∂–∞–ª–∫–æ.\n\n"
        "üìç –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    update.message.reply_text(welcome_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    pdf_file = "reservations/consent_form.pdf"
    context.bot.send_document(chat_id=update.effective_chat.id, document=open(pdf_file, "rb"))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–Ω—è—Ç—å"], ["–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]],
                                       one_time_keyboard=True,
                                       resize_keyboard=True)
    update.message.reply_text(
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
        "‚ùå –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏. \n\n"
        "‚ö†Ô∏è–ù–∞–∂–∏–º–∞—è '–ü—Ä–∏–Ω—è—Ç—å', —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=reply_markup,
    )
    return CONSENT

def handle_consent(update: Update, context: CallbackContext):
    user_response = update.message.text
    if user_response == "–ü—Ä–∏–Ω—è—Ç—å":
        update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É. üõ†Ô∏è"
        )

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        reply_markup = ReplyKeyboardMarkup(
            [["–ú–æ–π –∑–∞–∫–∞–∑", "–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"], ["–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å"]],
            resize_keyboard=True
        )
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    elif user_response == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–Ω—è—Ç—å"], ["–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]],
                                           one_time_keyboard=True,
                                           resize_keyboard=True)
        update.message.reply_text(
            "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–ë–µ–∑ —ç—Ç–æ–≥–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å'.",
            reply_markup=reply_markup
        )
        return CONSENT  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    else:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–Ω—è—Ç—å"], ["–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]],
                                           one_time_keyboard=True,
                                           resize_keyboard=True)
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π: –ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è.",
            reply_markup=reply_markup
        )
        return CONSENT



def tariffs(update: Update, context: CallbackContext):
    tariffs_info = (
        "üìã *–¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ:*\n"
        "- –î–æ 1 –º¬≥: 100 —Ä—É–±./–¥–µ–Ω—å\n"
        "- –û—Ç 1 –¥–æ 5 –º¬≥: 300 —Ä—É–±./–¥–µ–Ω—å\n"
        "- –ë–æ–ª–µ–µ 5 –º¬≥: 500 —Ä—É–±./–¥–µ–Ω—å\n\n"
        "‚ö†Ô∏è *–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–∏:*\n"
        "–ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§ "
        "–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤.\n\n"
        "–ù–µ–ª—å–∑—è —Ö—Ä–∞–Ω–∏—Ç—å:\n"
        "- –û—Ä—É–∂–∏–µ, –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã, –≤–∑—Ä—ã–≤—á–∞—Ç—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞\n"
        "- –¢–æ–∫—Å–∏—á–Ω—ã–µ, —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ª–µ–≥–∫–æ–≤–æ—Å–ø–ª–∞–º–µ–Ω—è—é—â–∏–µ—Å—è –≤–µ—â–µ—Å—Ç–≤–∞\n"
        "- –ñ–∏–≤–æ—Ç–Ω—ã—Ö\n"
        "- –ü–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏\n"
        "- –õ—é–±–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –Ω–∞—Ä—É—à–∞—é—â–µ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§"
    )
    update.message.reply_text(tariffs_info, parse_mode=telegram.ParseMode.MARKDOWN)

def order_box(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    keyboard = [
        [InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∏—Ç—å –º–æ–∏ –≤–µ—â–∏ –∫—É—Ä—å–µ—Ä–æ–º", callback_data="deliver_courier")],
        [InlineKeyboardButton("–ü—Ä–∏–≤–µ–∑—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data="self_delivery")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

def handle_self_delivery(update: Update, context: CallbackContext):
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    self_delivery_info = (
        "üöó *–ü—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞ –≤–µ—â–µ–π –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n"
        "1Ô∏è‚É£ <–ê–¥—Ä–µ—Å 1>\n"
        "2Ô∏è‚É£ <–ê–¥—Ä–µ—Å 2>\n"
        "3Ô∏è‚É£ <–ê–¥—Ä–µ—Å 3>\n\n"
        "üìç –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≤–∞—à–∏—Ö –≤–µ—â–µ–π –∏–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Ö –∏–∑–º–µ—Ä—è—Ç—å, –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–º–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–µ–¥—É—Ç –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –Ω–∞ —Å–∫–ª–∞–¥!\n"
        "üì¶ –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ –µ—Ö–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º!"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º
    keyboard = [
        [InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∏—Ç—å –º–æ–∏ –≤–µ—â–∏ –∫—É—Ä—å–µ—Ä–æ–º", callback_data="deliver_courier")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.callback_query.message.reply_text(
        self_delivery_info,
        parse_mode=telegram.ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

def handle_courier_delivery(update: Update, context: CallbackContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
    courier_info = (
        "üì¶ *–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º:*\n\n"
        "–ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞–±–µ—Ä—ë–º –≤–∞—à–∏ –≤–µ—â–∏ –∏–∑ –¥–æ–º–∞ –∏–ª–∏ –æ—Ñ–∏—Å–∞. –î–ª—è —ç—Ç–æ–≥–æ:\n"
        "1Ô∏è‚É£ <—Å–¥–µ–ª–∞–π—Ç–µ ....>.\n"
        "2Ô∏è‚É£ <.....>\n\n"
        "üìç –ö—É—Ä—å–µ—Ä –∑–∞–º–µ—Ä–∏—Ç –≤–µ—â–∏ –Ω–∞ –º–µ—Å—Ç–µ."
    )
    update.callback_query.message.reply_text(
        courier_info,
        parse_mode=telegram.ParseMode.MARKDOWN
    )


def handle_my_order(update: Update, context: CallbackContext):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –∑–∞–∫–∞–∑"
    update.message.reply_text("<–∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")


def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    return ConversationHandler.END


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CallbackQueryHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def main():
    env = Env()
    env.read_env()

    token = env.str('TG_BOT_TOKEN')
    bot = telegram.Bot(token=token)

    updater = Updater(token)

    dispatcher = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CONSENT: [MessageHandler(Filters.text & ~Filters.command, handle_consent)],
            MAIN_MENU: [
                MessageHandler(Filters.regex("–ú–æ–π –∑–∞–∫–∞–∑"), handle_my_order),
                MessageHandler(Filters.regex("–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"), tariffs),
                MessageHandler(Filters.regex("–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å"), order_box),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(telegram.ext.CallbackQueryHandler(handle_courier_delivery, pattern="^deliver_courier$"))
    dispatcher.add_handler(telegram.ext.CallbackQueryHandler(handle_self_delivery, pattern="^self_delivery$"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()

