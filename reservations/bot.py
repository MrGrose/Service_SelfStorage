import logging
import os
import random
import re
import qrcode
from io import BytesIO
from telegram import InputFile
from datetime import datetime, timedelta

import django
import telegram
from django.core.exceptions import ValidationError
from django.db.models import Count
from django.utils import timezone
from django.utils.timezone import now
from environs import Env
from telegram import (
    Bot,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    Updater,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'storage_bot.settings')
django.setup()

from reservations.models import (
    Order,
    StorageUnit,
    User,
    Warehouse
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
CONSENT = 0
MAIN_MENU = 1
REQUEST_NAME = 2
REQUEST_PHONE = 3
REQUEST_START_DATE = 4
REQUEST_DURATION = 5
REQUEST_ADDRESS = 6


def start(update: Update, context: CallbackContext):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SelfStorage ‚Äì —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.\n\n"
        "üì¶ –ö–æ–≥–¥–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω:\n"
        "- –ï—Å–ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –≤–µ—â–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ª—ã–∂–∏, —Å–Ω–æ—É–±–æ—Ä–¥—ã –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥.\n"
        "- –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–µ–∑–¥–∞ ‚Äì —á—Ç–æ–±—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –º–µ–±–µ–ª—å –∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏.\n"
        "- –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–Ω—ã–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Ö –∂–∞–ª–∫–æ.\n\n"
        "üìç –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    update.message.reply_text(welcome_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    pdf_file = "consent_form.pdf"
    try:
        with open(pdf_file, "rb") as file:
            context.bot.send_document(chat_id=update.effective_chat.id, document=file)
    except FileNotFoundError:
        update.message.reply_text("–§–∞–π–ª —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–Ω—è—Ç—å"], ["–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]],
                                       one_time_keyboard=True,
                                       resize_keyboard=True)
    update.message.reply_text(
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
        "‚ùå –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏. \n\n"
        "‚ö†Ô∏è–ù–∞–∂–∏–º–∞—è '–ü—Ä–∏–Ω—è—Ç—å', —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=reply_markup,
    )
    return CONSENT


def handle_consent(update: Update, context: CallbackContext):
    user_response = update.message.text
    if user_response == "–ü—Ä–∏–Ω—è—Ç—å":
        reply_markup = ReplyKeyboardMarkup(
            [["–ú–æ–π –∑–∞–∫–∞–∑", "–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"], ["–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É"]],
            resize_keyboard=True
        )
        update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É. üõ†Ô∏è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    elif user_response == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–Ω—è—Ç—å"], ["–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]],
                                           one_time_keyboard=True,
                                           resize_keyboard=True)
        update.message.reply_text(
            "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–ë–µ–∑ —ç—Ç–æ–≥–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å'.",
            reply_markup=reply_markup
        )
        return CONSENT  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    else:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–Ω—è—Ç—å"], ["–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]],
                                           one_time_keyboard=True,
                                           resize_keyboard=True)
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π: –ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è.",
            reply_markup=reply_markup
        )
        return CONSENT


def tariffs(update: Update, context: CallbackContext):
    # –¢–∞—Ä–∏—Ñ—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    tariffs_data = {
        'small': 100,
        'medium': 300,
        'large': 500,
    }
    size_labels = dict(StorageUnit.SIZE_CHOICES)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–º–µ—Ä—É
    free_sizes_count = (
        StorageUnit.objects.filter(is_occupied=False)
        .values('size')
        .annotate(count=Count('size'))
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
    tariffs_info = "üìã *–¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫:*\n\n"
    for size_data in free_sizes_count:
        size = size_data['size']
        count = size_data['count']
        price = tariffs_data.get(size, 0)
        tariffs_info += f"- {size_labels.get(size, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({count} —Å–≤–æ–±–æ–¥–Ω—ã—Ö): {price} —Ä—É–±./–¥–µ–Ω—å\n"

    tariffs_info += (
        "\n‚ö†Ô∏è *–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–∏:*\n"
        "–ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§ "
        "–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤.\n\n"
        "‚ùå*–ù–µ–ª—å–∑—è —Ö—Ä–∞–Ω–∏—Ç—å*:\n"
        "- –û—Ä—É–∂–∏–µ, –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã, –≤–∑—Ä—ã–≤—á–∞—Ç—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞\n"
        "- –¢–æ–∫—Å–∏—á–Ω—ã–µ, —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ª–µ–≥–∫–æ–≤–æ—Å–ø–ª–∞–º–µ–Ω—è—é—â–∏–µ—Å—è –≤–µ—â–µ—Å—Ç–≤–∞\n"
        "- –ñ–∏–≤–æ—Ç–Ω—ã—Ö\n"
        "- –ü–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏\n"
        "- –õ—é–±–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –Ω–∞—Ä—É—à–∞—é—â–µ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§"
    )

    update.message.reply_text(tariffs_info, parse_mode=telegram.ParseMode.MARKDOWN)


def handle_self_delivery(update: Update, context: CallbackContext):
    update.callback_query.answer()
    context.user_data['delivery_type'] = "self_delivery"

    warehouses = Warehouse.objects.all()

    self_delivery_info = "üöó *–ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–∏—Ö –≤–µ—â–µ–π:*\n\n"
    for idx, warehouse in enumerate(warehouses, start=1):
        self_delivery_info += f"{idx}Ô∏è‚É£ –°–∫–ª–∞–¥: {warehouse.warehouse_address}\n"

    self_delivery_info += (
        "\nüìç –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ä–∞–∑–º–µ—Ä–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —è—á–µ–π–∫–∏ –∏–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å –≤–µ—â–∏, "
        "–Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ä—ã –Ω–∞ –º–µ—Å—Ç–µ."
    )
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="continue_order_self_delivery")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.callback_query.message.reply_text(
        self_delivery_info,
        parse_mode=telegram.ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


def start_order_form_self_delivery(update: Update, context: CallbackContext):
    update.callback_query.answer()
    update.callback_query.message.reply_text(
        "üë§ –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û: (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )
    return REQUEST_NAME


def handle_courier_delivery(update: Update, context: CallbackContext):
    update.callback_query.answer()
    courier_info = (
        "üì¶ *–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:*\n\n"
        "–ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞–±–µ—Ä—ë–º –≤–∞—à–∏ –≤–µ—â–∏ –∏–∑ –¥–æ–º–∞ –∏–ª–∏ –æ—Ñ–∏—Å–∞. –í—Å–µ –∑–∞–º–µ—Ä—ã –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã –∫—É—Ä—å–µ—Ä–æ–º –Ω–∞ –º–µ—Å—Ç–µ.\n\n"
        "üìã *–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:*\n"
        "1Ô∏è‚É£ –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –∏ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è).\n"
        "2Ô∏è‚É£ –ö—É—Ä—å–µ—Ä —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
        "3Ô∏è‚É£ –ú—ã –∑–∞–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –≤–µ—â–∏ –∏ –ø–æ–º–µ—â–∞–µ–º –∏—Ö –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É.\n\n"
        "üöö –ö—É—Ä—å–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –∏ –∑–∞–±–µ—Ä—ë—Ç –≤–µ—â–∏ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑."
    )

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="continue_order")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.callback_query.message.reply_text(
        courier_info,
        parse_mode=telegram.ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


def order_box(update: Update, context: CallbackContext):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –≤—ã–≤–æ–¥–∏–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    keyboard = [
        [InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∏—Ç—å –º–æ–∏ –≤–µ—â–∏ –∫—É—Ä—å–µ—Ä–æ–º", callback_data="deliver_courier")],
        [InlineKeyboardButton("–ü—Ä–∏–≤–µ–∑—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data="self_delivery")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É? –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏.",
        reply_markup=reply_markup
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π ConversationHandler, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    return ConversationHandler.END


def start_order_form(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
    update.callback_query.answer()
    update.callback_query.message.reply_text(
        "üë§ –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û: (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )
    return REQUEST_NAME


def request_name(update: Update, context: CallbackContext):
    user_name = update.message.text.strip()
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$", user_name):
        update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á.")
        return REQUEST_NAME

    context.user_data['name'] = user_name
    update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):")
    return REQUEST_PHONE


def request_phone(update: Update, context: CallbackContext):
    phone = update.message.text.strip()
    if not re.match(r"^\+7\d{10}$", phone):
        update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79991234567.")
        return REQUEST_PHONE

    context.user_data['phone'] = phone
    update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return REQUEST_START_DATE


def request_start_date(update: Update, context: CallbackContext):
    start_date_str = update.message.text.strip()
    try:
        start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
        start_date = timezone.make_aware(start_date)
        if start_date.date() < datetime.now().date():
            update.message.reply_text("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
            return REQUEST_START_DATE
    except ValueError:
        update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return REQUEST_START_DATE

    context.user_data['start_date'] = start_date
    update.message.reply_text("üì¶ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30):")
    return REQUEST_DURATION


def request_duration(update: Update, context: CallbackContext):
    try:
        duration = int(update.message.text.strip())
        if duration <= 0:
            raise ValueError
        context.user_data['storage_duration'] = duration

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_type = context.user_data.get('delivery_type')
        if delivery_type == "self_delivery":
            return finalize_order_self(update, context, delivery_type="self_delivery")

        else:# –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
            update.message.reply_text(
                "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –≤–µ—â–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10):"
            )
            return REQUEST_ADDRESS
    except ValueError:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö (—á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)."
        )
        return REQUEST_DURATION


def request_duration_self_delivery(update: Update, context: CallbackContext):
    try:
        duration = int(update.message.text.strip())
        if duration <= 0:
            raise ValueError
        context.user_data['storage_duration'] = duration

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        return finalize_order_self(update, context, delivery_type="self_delivery")
    except ValueError:
        update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö.")
        return REQUEST_DURATION


def finalize_order_courier(update: Update, context: CallbackContext):
    context.user_data['address'] = update.message.text.strip()

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user, created = User.objects.get_or_create(
        user_id=update.effective_user.id,
        defaults={
            'name': context.user_data['name'],
            'phone_number': context.user_data['phone'],
        }
    )
    if not created:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        user.name = context.user_data['name']
        user.phone_number = context.user_data['phone']
        user.save()

    # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É
    free_units = StorageUnit.objects.filter(is_occupied=False)
    if not free_units.exists():
        update.message.reply_text("‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É
    selected_unit = random.choice(free_units)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        order = Order.objects.create(
            user=user,
            created_at=context.user_data['start_date'],
            storage_unit=selected_unit,
            storage_duration=context.user_data['storage_duration']
        )
        update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n\n"
            f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
            f"üë§ –§–ò–û: {user.name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {context.user_data['start_date']}\n"
            f"üì¶ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {context.user_data['storage_duration']} –¥–Ω–µ–π\n"
            f"üìç –ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
            f"üè∑Ô∏è –Ø—á–µ–π–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {selected_unit}\n\n"
            "–ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üòä",
            parse_mode=telegram.ParseMode.MARKDOWN
        )
    except ValidationError as e:
        update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return ConversationHandler.END
    reply_markup = ReplyKeyboardMarkup(
        [["–ú–æ–π –∑–∞–∫–∞–∑", "–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"], ["–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É"]],
        resize_keyboard=True
    )
    update.message.reply_text(
        "–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


def finalize_order_self(update: Update, context: CallbackContext, delivery_type="courier"):
    user, created = User.objects.get_or_create(
        user_id=update.effective_user.id,
        defaults={
            'name': context.user_data['name'],
            'phone_number': context.user_data['phone'],
        }
    )
    if not created:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        user.name = context.user_data['name']
        user.phone_number = context.user_data['phone']
        user.save()

    # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É
    free_units = StorageUnit.objects.filter(is_occupied=False)
    if not free_units.exists():
        update.message.reply_text("‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É
    selected_unit = random.choice(free_units)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        order = Order.objects.create(
            user=user,
            created_at=context.user_data['start_date'],
            storage_unit=selected_unit,
            storage_duration=context.user_data['storage_duration']
        )
        update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n\n"
            f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
            f"üë§ –§–ò–û: {user.name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {context.user_data['start_date']}\n"
            f"üì¶ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {context.user_data['storage_duration']} –¥–Ω–µ–π\n"
            f"üìç –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
            f"üè∑Ô∏è –Ø—á–µ–π–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {selected_unit}\n\n",
            parse_mode=telegram.ParseMode.MARKDOWN
        )
    except ValidationError as e:
        update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return ConversationHandler.END
    reply_markup = ReplyKeyboardMarkup(
        [["–ú–æ–π –∑–∞–∫–∞–∑", "–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"], ["–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É"]],
        resize_keyboard=True
    )
    update.message.reply_text(
        "–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


def main_menu(update, context):
    reply_markup = ReplyKeyboardMarkup(
        [["–ú–æ–π –∑–∞–∫–∞–∑", "–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"], ["–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É"]],
        resize_keyboard=True
    )
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return MAIN_MENU


from telegram import ParseMode

def handle_my_order(update: Update, context: CallbackContext):

    telegram_user_id = update.message.chat_id
    try:
        user = User.objects.get(user_id=telegram_user_id)
        orders = user.get_orders()

        if not orders.exists() or not any(order.status != 'completed' for order in orders):
            update.message.reply_text(
                "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        orders_info = "üìã *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
        for order in orders:
            if order.status != 'completed':
                status_emoji = {
                    'pending': "‚è≥",
                    'active': "‚úÖ",
                    'expired': "‚ö†Ô∏è",
                    'completed': "‚úîÔ∏è"
                }.get(order.status, "‚ùì")

                end_date = order.start_date + timedelta(days=order.storage_duration)
                days_left = (end_date - now()).days

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                orders_info += (
                    f"{status_emoji} *–ó–∞–∫–∞–∑ {order.order_id}:*\n"
                    f"- –Ø—á–µ–π–∫–∞: {order.storage_unit.get_size_display()}\n"
                    f"- –°–∫–ª–∞–¥: {order.storage_unit.warehouse.name}\n"
                    f"- –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: {order.storage_unit.warehouse.warehouse_address or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"- –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {order.storage_duration} –¥–Ω–µ–π\n"
                    f"- –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left if days_left > 0 else '–ò—Å—Ç—ë–∫'}\n"
                    f"- –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
                    f"- –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: {order.start_date.strftime('%d.%m.%Y')}\n"
                    f"- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.calculated_total_cost} —Ä—É–±.\n\n"
                )

                keyboard = [
                    [InlineKeyboardButton("üîë –ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"pickup_order_{order.order_id}")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                update.message.reply_text(
                    orders_info,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
    except User.DoesNotExist:(
        update.message.reply_text(
            "‚ùå –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.",
            parse_mode=ParseMode.MARKDOWN
        ))


def handle_pickup_order(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.split('_')[-1]

    try:
        order = Order.objects.get(order_id=order_id)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        print(f"[DEBUG] –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: ID={order.order_id}, –°—Ç–∞—Ç—É—Å={order.status}")

        if order.status == 'completed':
            query.message.reply_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
        qr_data = f"Order ID: {order_id}, User: {order.user.name}, Storage Unit: {order.storage_unit.unit_id}"
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(qr_data)
        qr.make(fit=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ –±—É—Ñ–µ—Ä
        qr_image = qr.make_image(fill_color="black", back_color="white")
        buffer = BytesIO()
        qr_image.save(buffer, format="PNG")
        buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        query.message.reply_photo(photo=InputFile(buffer, filename=f"order_{order_id}_qr.png"),
                                  caption="üîë –í–æ—Ç –≤–∞—à QR-–∫–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏.")

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "completed"
        order.status = 'completed'
        order.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"[DEBUG] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ID={order.order_id}, –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å={order.status}")

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —è—á–µ–π–∫—É
        order.release_storage_unit()
        print("[DEBUG] –ú–µ—Ç–æ–¥ release_storage_unit –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

    except Order.DoesNotExist:
        query.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except ValidationError as e:
        query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except Exception as e:
        query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
        print(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")



def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    return ConversationHandler.END


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CallbackQueryHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def main():
    env = Env()
    env.read_env()

    token = env.str('TG_BOT_TOKEN')
    bot = telegram.Bot(token=token)

    updater = Updater(token)
    dispatcher = updater.dispatcher

    start_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CONSENT: [
                MessageHandler(Filters.regex("^(–ü—Ä–∏–Ω—è—Ç—å|–û—Ç–∫–∞–∑–∞—Ç—å—Å—è)$"), handle_consent),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    main_menu_handler = ConversationHandler(
        entry_points=[
            CommandHandler("main_menu", main_menu),  # –í—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
            MessageHandler(Filters.regex("^–ú–µ–Ω—é$"), main_menu),
            MessageHandler(Filters.regex("^–ú–æ–π –∑–∞–∫–∞–∑$"), handle_my_order),
            MessageHandler(Filters.regex("^–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è$"), tariffs),
            MessageHandler(Filters.regex("^–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É$"), order_box),
        ],
        states={
            MAIN_MENU: [
                MessageHandler(Filters.regex("^–ú–æ–π –∑–∞–∫–∞–∑$"), handle_my_order),
                MessageHandler(Filters.regex("^–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è$"), tariffs),
                MessageHandler(Filters.regex("^–ó–∞–∫–∞–∑–∞—Ç—å —è—á–µ–π–∫—É$"), order_box),
                MessageHandler(
                    Filters.text & ~Filters.command,
                    lambda update, context: update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é!")
                ),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    order_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_order_form, pattern="^continue_order$"),
            CallbackQueryHandler(start_order_form_self_delivery, pattern="^continue_order_self_delivery$")
        ],
        states={
            REQUEST_NAME: [
                MessageHandler(Filters.text & ~Filters.command, request_name),
            ],
            REQUEST_PHONE: [
                MessageHandler(Filters.text & ~Filters.command, request_phone),
            ],
            REQUEST_START_DATE: [
                MessageHandler(Filters.text & ~Filters.command, request_start_date),
            ],
            REQUEST_DURATION: [
                MessageHandler(Filters.text & ~Filters.command, request_duration),
                #MessageHandler(Filters.text & ~Filters.command, request_duration_self_delivery),
            ],
            REQUEST_ADDRESS: [
                #MessageHandler(Filters.text & ~Filters.command, finalize_order_self),
                MessageHandler(Filters.text & ~Filters.command, finalize_order_courier),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dispatcher.add_handler(start_conv_handler)  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π ConversationHandler
    dispatcher.add_handler(order_conv_handler) # –û—Ç–¥–µ–ª—å–Ω—ã–π ConversationHandler –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    dispatcher.add_handler(main_menu_handler)
    dispatcher.add_handler(CallbackQueryHandler(handle_courier_delivery, pattern="^deliver_courier$"))
    dispatcher.add_handler(CallbackQueryHandler(handle_self_delivery, pattern="^self_delivery$"))
    dispatcher.add_handler(CallbackQueryHandler(start_order_form, pattern="^continue_order$"))
    dispatcher.add_handler(CallbackQueryHandler(handle_pickup_order, pattern=r'^pickup_order_\d+$'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()

